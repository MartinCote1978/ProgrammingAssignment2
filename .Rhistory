library("swirl")
swirl()
5 + 7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
z <- 2
tst <- function(x, y){ x + y + z}
tst(1,1)
z <- 56
tst(1,1)
library("swirl")
swirl()
x <- Sys.time()
y <- as.Date("2000-01-01")
y
x - y
x <- Sys.date()
x
y
x <- Sys.today()
x <- date()
x
x - y
x
y
y <- strptime(y, "%d %B %d %H:%M %Y")
y
y <- as.Date("2000-01-01")
y <- as.POSIXlt(y)
x-y
x <- as.POSIXlt(x)
clear
clear()
restart()
swirl()
getwd()
ls()
x <- 9
play()
ls()
nxt()
ls()
list.files()
?list.files
list.files(recursive = TRUE)
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
getwd()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
dir.create("testdir2")
dir.create("testdir2/testdir3", recursive=TRUE)
unlink("testdir2")
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive=TRUE)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library("swirl")
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Martin Cote")
my_name <- c(my_char, "Martin Cote")
my_name
paste(my_char, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library("swirl")
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library("swirl")
swirl()
head(flags, 6)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtittle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
data(cars)
view(cars)
View(cars)
### Unit test cachematrix.R
source("cachematrix.R")
tst_matrixempty <- matrix()
# Matrix 2x2
tst_matrix2x2 <- matrix(1:4, nrow=2, ncol=2)
# Matrix 3x3
tst_matrix3x3 <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
# Matrix 4x4
tst_matrix4x4 <- matrix(c(1,1,1,1,1,2,1,4,1,1,1,2,1,2,0,3), nrow=4, ncol=4)
## Test empty matrix
cachematrixempty <- makeCacheMatrix(tst_matrixempty)
# Call once (without cache)...
cacheSolve(cachematrixempty)
# Call twice (with cache)...
cacheSolve(cachematrixempty)
# Call third (with cache)...
cacheSolve(cachematrixempty)
## Test 2x2 matrix
cachematrix2x2 <- makeCacheMatrix(tst_matrix2x2)
# Call once (without cache)...
cacheSolve(cachematrix2x2)
# Call twice (with cache)...
cacheSolve(cachematrix2x2)
# Call third (with cache)...
cacheSolve(cachematrix2x2)
## Test 3x3 matrix
cachematrix3x3 <- makeCacheMatrix(tst_matrix3x3)
# Call once (without cache)...
cacheSolve(cachematrix3x3)
# Call twice (with cache)...
cacheSolve(cachematrix3x3)
# Call third (with cache)...
cacheSolve(cachematrix3x3)
# Test setter
tst_matrix3x3bis <- matrix(c(2,3,2,1,2,1,1,1,2), nrow=3, ncol=3)
cachematrix3x3$set(tst_matrix3x3bis)
# Call once (without cache)...
cacheSolve(cachematrix3x3)
# Call twice (with cache)...
cacheSolve(cachematrix3x3)
## Test 4x4 matrix
cachematrix4x4 <- makeCacheMatrix(tst_matrix4x4)
# Call once (without cache)...
cacheSolve(cachematrix4x4)
# Call twice (with cache)...
cacheSolve(cachematrix4x4)
# Call third (with cache)...
cacheSolve(cachematrix4x4)
## Test original R documentation "solve" examples
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8);
cache_h8 <- makeCacheMatrix(h8)
sh8 <- cacheSolve(cache_h8); sh8
sh8 <- cacheSolve(cache_h8); sh8
setwd("~/github-repo/ProgrammingAssignment2")
### Unit test cachematrix.R
source("cachematrix.R")
tst_matrixempty <- matrix()
# Matrix 2x2
tst_matrix2x2 <- matrix(1:4, nrow=2, ncol=2)
# Matrix 3x3
tst_matrix3x3 <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
# Matrix 4x4
tst_matrix4x4 <- matrix(c(1,1,1,1,1,2,1,4,1,1,1,2,1,2,0,3), nrow=4, ncol=4)
## Test empty matrix
cachematrixempty <- makeCacheMatrix(tst_matrixempty)
# Call once (without cache)...
cacheSolve(cachematrixempty)
# Call twice (with cache)...
cacheSolve(cachematrixempty)
# Call third (with cache)...
cacheSolve(cachematrixempty)
## Test 2x2 matrix
cachematrix2x2 <- makeCacheMatrix(tst_matrix2x2)
# Call once (without cache)...
cacheSolve(cachematrix2x2)
# Call twice (with cache)...
cacheSolve(cachematrix2x2)
# Call third (with cache)...
cacheSolve(cachematrix2x2)
## Test 3x3 matrix
cachematrix3x3 <- makeCacheMatrix(tst_matrix3x3)
# Call once (without cache)...
cacheSolve(cachematrix3x3)
# Call twice (with cache)...
cacheSolve(cachematrix3x3)
# Call third (with cache)...
cacheSolve(cachematrix3x3)
# Test setter
tst_matrix3x3bis <- matrix(c(2,3,2,1,2,1,1,1,2), nrow=3, ncol=3)
cachematrix3x3$set(tst_matrix3x3bis)
# Call once (without cache)...
cacheSolve(cachematrix3x3)
# Call twice (with cache)...
cacheSolve(cachematrix3x3)
## Test 4x4 matrix
cachematrix4x4 <- makeCacheMatrix(tst_matrix4x4)
# Call once (without cache)...
cacheSolve(cachematrix4x4)
# Call twice (with cache)...
cacheSolve(cachematrix4x4)
# Call third (with cache)...
cacheSolve(cachematrix4x4)
## Test original R documentation "solve" examples
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8);
cache_h8 <- makeCacheMatrix(h8)
sh8 <- cacheSolve(cache_h8); sh8
sh8 <- cacheSolve(cache_h8); sh8
